declare const rootReducer: import("redux").Reducer<import("redux").CombinedState<{
    loginReducer: import("../models/ILogin").ILogin;
    contactAPI: import("@reduxjs/toolkit/dist/query/core/apiState").CombinedState<{
        fetchAllContacts: import("@reduxjs/toolkit/dist/query").QueryDefinition<import("../models/IContact").IContact[], import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact[], "contactAPI">;
        createContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
        updateContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
        deleteContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
    }, "Contact", "contactAPI">;
    userAPI: import("@reduxjs/toolkit/dist/query/core/apiState").CombinedState<{
        fetchAllUsers: import("@reduxjs/toolkit/dist/query").QueryDefinition<any, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "User", import("../models/IUser").IUser[], "userAPI">;
    }, "User", "userAPI">;
}>, import("redux").AnyAction>;
export declare const setupStore: () => import("@reduxjs/toolkit").EnhancedStore<import("redux").CombinedState<{
    loginReducer: import("../models/ILogin").ILogin;
    contactAPI: import("@reduxjs/toolkit/dist/query/core/apiState").CombinedState<{
        fetchAllContacts: import("@reduxjs/toolkit/dist/query").QueryDefinition<import("../models/IContact").IContact[], import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact[], "contactAPI">;
        createContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
        updateContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
        deleteContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
    }, "Contact", "contactAPI">;
    userAPI: import("@reduxjs/toolkit/dist/query/core/apiState").CombinedState<{
        fetchAllUsers: import("@reduxjs/toolkit/dist/query").QueryDefinition<any, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "User", import("../models/IUser").IUser[], "userAPI">;
    }, "User", "userAPI">;
}>, import("redux").AnyAction, import("@reduxjs/toolkit").MiddlewareArray<[import("redux-thunk").ThunkMiddleware<import("redux").CombinedState<{
    loginReducer: import("../models/ILogin").ILogin;
    contactAPI: import("@reduxjs/toolkit/dist/query/core/apiState").CombinedState<{
        fetchAllContacts: import("@reduxjs/toolkit/dist/query").QueryDefinition<import("../models/IContact").IContact[], import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact[], "contactAPI">;
        createContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
        updateContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
        deleteContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
    }, "Contact", "contactAPI">;
    userAPI: import("@reduxjs/toolkit/dist/query/core/apiState").CombinedState<{
        fetchAllUsers: import("@reduxjs/toolkit/dist/query").QueryDefinition<any, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "User", import("../models/IUser").IUser[], "userAPI">;
    }, "User", "userAPI">;
}>, import("redux").AnyAction, undefined>, import("redux").Middleware<{}, import("@reduxjs/toolkit/dist/query/core/apiState").RootState<{
    fetchAllContacts: import("@reduxjs/toolkit/dist/query").QueryDefinition<import("../models/IContact").IContact[], import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact[], "contactAPI">;
    createContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
    updateContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
    deleteContact: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("../models/IContact").IContact, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Contact", import("../models/IContact").IContact, "contactAPI">;
}, string, "contactAPI">, import("@reduxjs/toolkit").ThunkDispatch<any, any, import("redux").AnyAction>>, import("redux").Middleware<{}, import("@reduxjs/toolkit/dist/query/core/apiState").RootState<{
    fetchAllUsers: import("@reduxjs/toolkit/dist/query").QueryDefinition<any, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "User", import("../models/IUser").IUser[], "userAPI">;
}, string, "userAPI">, import("@reduxjs/toolkit").ThunkDispatch<any, any, import("redux").AnyAction>>]>>;
export declare type RootState = ReturnType<typeof rootReducer>;
export declare type AppStore = ReturnType<typeof setupStore>;
export declare type AppDispatch = AppStore['dispatch'];
export {};
